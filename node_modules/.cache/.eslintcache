[{"/home/fernando/EjerciciosInterfacesWeb/practica5/src/index.tsx":"1","/home/fernando/EjerciciosInterfacesWeb/practica5/src/reportWebVitals.ts":"2","/home/fernando/EjerciciosInterfacesWeb/practica5/src/App.tsx":"3","/home/fernando/EjerciciosInterfacesWeb/practica5/src/components/query/infoCountry.tsx":"4","/home/fernando/EjerciciosInterfacesWeb/practica5/src/components/input/input.tsx":"5","/home/fernando/EjerciciosInterfacesWeb/practica5/src/components/query/info.tsx":"6","/home/fernando/weather-api/src/index.tsx":"7","/home/fernando/weather-api/src/reportWebVitals.ts":"8","/home/fernando/weather-api/src/App.tsx":"9","/home/fernando/weather-api/src/components/query/info.tsx":"10","/home/fernando/weather-api/src/components/input/input.tsx":"11","/home/fernando/weather-api/src/components/query/infoCountry.tsx":"12"},{"size":500,"mtime":1623323668435,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1623323668435,"results":"15","hashOfConfig":"14"},{"size":1426,"mtime":1623323668434,"results":"16","hashOfConfig":"14"},{"size":5608,"mtime":1623323668434,"results":"17","hashOfConfig":"14"},{"size":1141,"mtime":1623323668434,"results":"18","hashOfConfig":"14"},{"size":4363,"mtime":1623323668434,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1623323668435,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1623323668435,"results":"22","hashOfConfig":"21"},{"size":1426,"mtime":1623323668434,"results":"23","hashOfConfig":"21"},{"size":4363,"mtime":1623323668434,"results":"24","hashOfConfig":"21"},{"size":1141,"mtime":1623323668434,"results":"25","hashOfConfig":"21"},{"size":5608,"mtime":1623323668434,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ltpua1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jpitwz",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/home/fernando/EjerciciosInterfacesWeb/practica5/src/index.tsx",[],"/home/fernando/EjerciciosInterfacesWeb/practica5/src/reportWebVitals.ts",[],"/home/fernando/EjerciciosInterfacesWeb/practica5/src/App.tsx",["55"],"import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport { ApolloProvider } from '@apollo/client/react';\nimport './App.css';\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core';\n\nimport InputText from './components/input/input'\nimport InfoCity from './components/query/info'\nimport InfoCountry from './components/query/infoCountry'\n\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_URL,\n  cache: new InMemoryCache()\n})\n\n\nfunction App() {\n  \n  const [searchName, setName] = useState<string>(\"\")\n  const [type, setType] = useState<boolean>(false);\n\n  const setAll = (name: string, isCountry: boolean) => {\n    setName(name);\n    setType(isCountry)\n  }\n  console.log(\"autor: FERNANDO MURUA ALCAZAR\");\n  \n  return (\n    <ApolloProvider client={client}>\n      {searchName === \"\" &&\n        <InputText changeFilter={setAll}/>\n      }\n\n      {searchName !== \"\" &&\n        <div>\n          <div className=\"center\" onClick={() => {\n            setName(\"\")\n            setType(false)\n            }}>\n              <div className=\"image\"></div>\n              <div>Click to restart the search</div>\n          </div>\n        {!type &&\n          <InfoCity name={searchName} changeFilter={setAll}/>\n        }\n        {type &&\n          <InfoCountry name={searchName} changeFilter={setAll}/>\n        }\n\n        </div>\n        \n        \n      }\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/home/fernando/EjerciciosInterfacesWeb/practica5/src/components/query/infoCountry.tsx",["56","57","58"],"import React, { useState, FC, useEffect } from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { gql, useQuery } from \"@apollo/client\"\nimport './infoCountry.css'\nimport axios from 'axios';\n\n\nconst Country = gql`\n  query getCountry($name :String!){\n    countries(where: {name: {eq: $name}}) {\n      continent {\n        name\n      }\n      currencies {\n        name\n      }\n      population\n      languages {\n        name\n      }\n      capital {\n        name\n        location {\n          lat\n          long\n        }\n      }\n      name\n      alpha2Code\n      \n    }\n  }\n    \n  \n`\n\ninterface CountryProps {\n  name: string\n  changeFilter: Function,\n}\n\ninterface ICountry {\n  countries: Array<{\n    continent: {\n      name: string\n    },\n    capital: {\n      name: string,\n      location: {\n        lat: number,\n        long: number\n      }\n    },\n    currencies: Array<{\n      name: string\n    }>,\n    population: number,\n    languages: Array<{\n      name: string\n    }>,\n    name: string,\n    alpha2Code: string,\n\n  }>\n}\n\ninterface WeatherAPI {\n  coord: Coord;\n  weather: Weather[];\n  base: string;\n  main: Main;\n  visibility: number;\n  wind: Wind;\n  clouds: Clouds;\n  dt: number;\n  sys: Sys;\n  timezone: number;\n  id: number;\n  name: string;\n  cod: number;\n}\n\ninterface Clouds {\n  all: number;\n}\n\ninterface Coord {\n  lon: number;\n  lat: number;\n}\n\ninterface Main {\n  temp: number;\n  feels_like: number;\n  temp_min: number;\n  temp_max: number;\n  pressure: number;\n  humidity: number;\n}\n\ninterface Sys {\n  type: number;\n  id: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\ninterface Weather {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n\ninterface Wind {\n  speed: number;\n  deg: number;\n}\n\n\n\nconst InfoCountry: FC<CountryProps> = (props) => {\n\n  const { data, loading, error } = useQuery<ICountry>(Country, { variables: { name: props.name } })\n  const [index, setIndex] = useState<number>(-1);\n\n  const [dataWeather, setData] = useState<WeatherAPI>();\n\n  useEffect(() => {\n    if (index !== -1) {\n      axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + data?.countries[index].capital.location.lat + \"&lon=\" + data?.countries[index].capital.location.long + \"&appid=\" + process.env.REACT_APP_KEY).then((results) => {\n        setData(results.data);\n        console.log(results.data);\n\n      })\n    }\n\n  }, [index]);\n\n  return (\n    <div className=\"container_global_country\">\n      {loading && <ClipLoader color=\"blue\" />}\n      {error && <div>{error.message}</div>}\n      {data && data.countries.map((country, index_country) => {\n        if (index === index_country) {\n          return (\n            <div className=\"container_info_country\" >\n              <div className=\"name_country no\" onClick={() => {\n                setIndex(index);\n\n              }}>{country.name}</div>\n              <div className=\"args_country\">Continent: {country.continent.name}</div>\n              <div className=\"capital\" onClick={() => {\n                props.changeFilter(country.capital.name, false)\n              }}>Capital: {country.capital.name}</div>\n              <div className=\"args_country\">Currencies: </div>\n              {country.currencies && country.currencies.map((currencie) => {\n                return (<div>---{currencie.name}</div>)\n              })}\n              <div className=\"args_country\">Languages: </div>\n              {country.languages && country.languages.map((language) => {\n                return (<div>---{language.name}</div>)\n              })}\n              <div className=\"args_country\">Population: {country.population}</div>\n\n            </div>\n\n          )\n        } else {\n          return (\n            <div className=\"container_info_country\" >\n              <div className=\"name_country\" onClick={() => {\n                setIndex(index_country)\n              }}>{country.name}</div>\n\n\n            </div>\n          )\n        }\n      })}\n      {index != -1 &&\n        <div className=\"ventana\">\n          <div className=\"cerrar\" onClick={() => setIndex(-1)}>X</div>\n          <div className=\"bandera\">\n            <img src={\"https://www.countryflags.io/\" + data?.countries[index].alpha2Code + \"/flat/64.png\"}></img>\n\n          </div>\n          <div className=\"datos\">\n            <div className=\"data\">Continent: {data?.countries[index].continent.name}</div>\n            <div className=\"data\">Name: {data?.countries[index].name}</div>\n            <div className=\"data\">Code: {data?.countries[index].alpha2Code}</div>\n            <div className=\"data\">Population: {data?.countries[index].population}</div>\n            <div className=\"data capital\" onClick={() => {\n              props.changeFilter(data?.countries[index].capital.name, false)\n            }}>Capital: {data?.countries[index].capital.name}</div>\n            {data?.countries[index].languages && data.countries[index].languages.map((language, index) => {\n              return (<div className=\"data\">Language {index}: {language.name}</div>)\n            })}\n            {data?.countries[index].currencies && data.countries[index].currencies.map((currency, index) => {\n              return (<div className=\"data\">Currency {index}: {currency.name}</div>)\n            })}\n            {dataWeather &&\n              <div>\n                <br />\n                <div className=\"data\">Weather description: {dataWeather.weather[0].description}</div>\n                <div className=\"data\">Time: {(dataWeather.main.temp - 273.15)}ºC</div>\n              </div>\n            }\n          </div>\n        </div>\n      }\n    </div>\n  )\n\n}\n\nexport default InfoCountry;","/home/fernando/EjerciciosInterfacesWeb/practica5/src/components/input/input.tsx",["59"],"import { fchmod } from 'fs';\nimport React from 'react';\nimport {FC, useState} from 'react';\nimport './input.css'\n\ninterface InputTextProps{\n  changeFilter: Function,\n}\n\nconst InputText: FC<InputTextProps> = (props) => {\n\n  const [searchName, setName] = useState<string>(\"\")\n  const [type, setType] = useState<boolean>(false);\n  \n  return (\n    <div className=\"container\">\n\n      <div className=\"box\">\n        <div className=\"container_search\">\n            <input placeholder=\"Enter a name to continue\" className=\"input_text\" type=\"text\" onChange={(e) => {\n                setName(e.target.value)       \n            }} />\n          <div className=\"button\" onClick={() => {\n            props.changeFilter(searchName,type)\n            }}>Search</div>\n        </div>\n        <div className=\"container_type\">\n            {!type&&\"✔\"}\n          <div className=\"type\" onClick={() => {\n            setType(false);\n            }}>City</div>\n            {type&&\"✔\"}\n          <div className=\"type\" onClick={() => {\n            setType(true)\n            }}>Country</div>\n          </div>\n      </div>\n\n    </div>\n  );\n\n}\n\n\nexport default InputText;","/home/fernando/EjerciciosInterfacesWeb/practica5/src/components/query/info.tsx",["60","61"],"import React, { useState, FC, useEffect } from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { gql, useQuery } from \"@apollo/client\"\nimport './info.css'\nimport axios from 'axios';\nconst City = gql`\n  query getCity($name :String!){\n      cities(where: {name: {eq: $name}}) {\n        name\n        population\n        location {\n          lat\n          long\n        }\n        country {\n          name\n          alpha2Code\n        }\n        timeZone {\n          name\n        }\n      }\n  }\n`\ninterface CityProps {\n  name: string,\n  changeFilter: Function,\n\n}\n\ninterface ICity {\n  cities: Array<{\n    name: string,\n    population: number,\n    location: {\n      lat: number,\n      long: number\n    }\n    country: {\n      name: string,\n      alpha2Code: string\n    }\n    timeZone: {\n      name: string\n    }\n  }>\n}\n\n\ninterface WeatherAPI {\n  coord: Coord;\n  weather: Weather[];\n  base: string;\n  main: Main;\n  visibility: number;\n  wind: Wind;\n  clouds: Clouds;\n  dt: number;\n  sys: Sys;\n  timezone: number;\n  id: number;\n  name: string;\n  cod: number;\n}\n\ninterface Clouds {\n  all: number;\n}\n\ninterface Coord {\n  lon: number;\n  lat: number;\n}\n\ninterface Main {\n  temp: number;\n  feels_like: number;\n  temp_min: number;\n  temp_max: number;\n  pressure: number;\n  humidity: number;\n}\n\ninterface Sys {\n  type: number;\n  id: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\ninterface Weather {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n\ninterface Wind {\n  speed: number;\n  deg: number;\n}\n\n\n\n\nconst InfoCity: FC<CityProps> = (props) => {\n  const { data, loading, error } = useQuery<ICity>(City, { variables: { name: props.name } })\n  const [index, setIndex] = useState<number>(-1);\n  const [dataWeather, setData] = useState<WeatherAPI>();\n  useEffect(() => {\n    if (index !== -1) {\n      axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + data?.cities[index].location.lat + \"&lon=\" + data?.cities[index].location.long + \"&appid=\" + process.env.REACT_APP_KEY).then((results) => {\n        setData(results.data);\n        console.log(results.data);\n\n      })\n    }\n\n  }, [index]);\n  console.log(data);\n\n  return (\n    <div className=\"container_global\">\n      {loading && <ClipLoader color=\"blue\" />}\n      {error && <div>{error.message}</div>}\n      {data && data.cities.map((city, index_city) => {\n        if (index === index_city) {\n          return (\n            <div className=\"container_info\" >\n              <div className=\"name no\" onClick={() => {\n                setIndex(index)\n              }}>{city.name}</div>\n              <div className=\"args country\" onClick={() => {\n                props.changeFilter(city.country.name, true)\n              }}>Country: {city.country.name}</div>\n              <div className=\"args\">Population: {city.population}</div>\n              {city.timeZone && <div className=\"args\">TimeZone: {city.timeZone.name}</div>}\n            </div>\n          )\n        } else {\n          return (\n            <div className=\"container_info\" >\n              <div className=\"name\" onClick={() => {\n                setIndex(index_city)\n              }}>{city.name}</div>\n            </div>\n          )\n        }\n      })}\n\n      {index !== -1 &&\n        <div className=\"ventana\">\n          <div className=\"cerrar\" onClick={() => setIndex(-1)}>X</div>\n          <div className=\"datos\">\n            <div className=\"bandera\">\n              <img src={\"https://www.countryflags.io/\" + data?.cities[index].country.alpha2Code + \"/flat/64.png\"}></img>\n\n            </div>\n          <div className=\"data country\" onClick={\n            () => {\n              props.changeFilter(data?.cities[index].country.name,true);\n            }\n            }>Country: {data?.cities[index].country.name}</div>\n            <div className=\"data\">Population: {data?.cities[index].population} </div>\n            {data?.cities[index].timeZone && <div className=\"data\">Time zone: {data.cities[index].timeZone.name}</div>}\n            {dataWeather &&\n            <div>\n                <br />\n                <div className=\"data\">Weather description: {dataWeather.weather[0].description}</div>\n                <div className=\"data\">Time: {(dataWeather.main.temp - 273.15)}ºC</div>\n              </div>\n            }\n          </div>\n        </div>\n\n      }\n    </div>\n  )\n}\n\n\nexport default InfoCity;","/home/fernando/weather-api/src/index.tsx",[],"/home/fernando/weather-api/src/reportWebVitals.ts",[],"/home/fernando/weather-api/src/App.tsx",["62"],"/home/fernando/weather-api/src/components/query/info.tsx",["63","64"],"/home/fernando/weather-api/src/components/input/input.tsx",["65"],"/home/fernando/weather-api/src/components/query/infoCountry.tsx",["66","67","68"],{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"74","line":139,"column":6,"nodeType":"75","endLine":139,"endColumn":13,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":182,"column":14,"nodeType":"79","messageId":"80","endLine":182,"endColumn":16},{"ruleId":"81","severity":1,"message":"82","line":186,"column":13,"nodeType":"83","endLine":186,"endColumn":108},{"ruleId":"69","severity":1,"message":"84","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":16},{"ruleId":"73","severity":1,"message":"85","line":120,"column":6,"nodeType":"75","endLine":120,"endColumn":13,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"82","line":157,"column":15,"nodeType":"83","endLine":157,"endColumn":115},{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"85","line":120,"column":6,"nodeType":"75","endLine":120,"endColumn":13,"suggestions":"87"},{"ruleId":"81","severity":1,"message":"82","line":157,"column":15,"nodeType":"83","endLine":157,"endColumn":115},{"ruleId":"69","severity":1,"message":"84","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":139,"column":6,"nodeType":"75","endLine":139,"endColumn":13,"suggestions":"88"},{"ruleId":"77","severity":1,"message":"78","line":182,"column":14,"nodeType":"79","messageId":"80","endLine":182,"endColumn":16},{"ruleId":"81","severity":1,"message":"82","line":186,"column":13,"nodeType":"83","endLine":186,"endColumn":108},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data?.countries'. Either include it or remove the dependency array.","ArrayExpression",["89"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'fchmod' is defined but never used.","React Hook useEffect has a missing dependency: 'data?.cities'. Either include it or remove the dependency array.",["90"],["91"],["92"],{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"95","fix":"97"},{"desc":"93","fix":"98"},"Update the dependencies array to be: [data?.countries, index]",{"range":"99","text":"100"},"Update the dependencies array to be: [data?.cities, index]",{"range":"101","text":"102"},{"range":"103","text":"102"},{"range":"104","text":"100"},[2382,2389],"[data?.countries, index]",[2138,2145],"[data?.cities, index]",[2138,2145],[2382,2389]]