{"ast":null,"code":"var _jsxFileName = \"/home/fernando/weather-api/src/components/query/info.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport './info.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst City = gql`\n  query getCity($name :String!){\n      cities(where: {name: {eq: $name}}) {\n        name\n        population\n        location {\n          lat\n          long\n        }\n        country {\n          name\n          alpha2Code\n        }\n        timeZone {\n          name\n        }\n      }\n  }\n`;\n\nconst InfoCity = props => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(City, {\n    variables: {\n      name: props.name\n    }\n  });\n  const [index, setIndex] = useState(-1);\n  const [dataWeather, setData] = useState();\n  useEffect(() => {\n    if (index !== -1) {\n      axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + (data === null || data === void 0 ? void 0 : data.cities[index].location.lat) + \"&lon=\" + (data === null || data === void 0 ? void 0 : data.cities[index].location.long) + \"&appid=\" + process.env.REACT_APP_KEY).then(results => {\n        setData(results.data);\n        console.log(results.data);\n      });\n    }\n  }, [index]);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container_global\",\n    children: [loading && /*#__PURE__*/_jsxDEV(ClipLoader, {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this), data && data.cities.map((city, index_city) => {\n      if (index === index_city) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container_info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name no\",\n            onClick: () => {\n              setIndex(index);\n            },\n            children: city.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"args country\",\n            onClick: () => {\n              props.changeFilter(city.country.name, true);\n            },\n            children: [\"Country: \", city.country.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"args\",\n            children: [\"Population: \", city.population]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), city.timeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"args\",\n            children: [\"TimeZone: \", city.timeZone.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container_info\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name\",\n            onClick: () => {\n              setIndex(index_city);\n            },\n            children: city.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this);\n      }\n    }), index !== -1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ventana\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cerrar\",\n        onClick: () => setIndex(-1),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"datos\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bandera\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://www.countryflags.io/\" + (data === null || data === void 0 ? void 0 : data.cities[index].country.alpha2Code) + \"/flat/64.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data country\",\n          onClick: () => {\n            props.changeFilter(data === null || data === void 0 ? void 0 : data.cities[index].country.name, true);\n          },\n          children: [\"Country: \", data === null || data === void 0 ? void 0 : data.cities[index].country.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data\",\n          children: [\"Population: \", data === null || data === void 0 ? void 0 : data.cities[index].population, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), (data === null || data === void 0 ? void 0 : data.cities[index].timeZone) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data\",\n          children: [\"Time zone: \", data.cities[index].timeZone.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 46\n        }, this), dataWeather && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: [\"Weather description: \", dataWeather.weather[0].description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data\",\n            children: [\"Time: \", dataWeather.main.temp - 273.15, \"\\xBAC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InfoCity, \"KV+crTfTClWDm9GuJDpqz28fOYg=\", false, function () {\n  return [useQuery];\n});\n\n_c = InfoCity;\nexport default InfoCity;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoCity\");","map":{"version":3,"sources":["/home/fernando/weather-api/src/components/query/info.tsx"],"names":["React","useState","useEffect","ClipLoader","gql","useQuery","axios","City","InfoCity","props","data","loading","error","variables","name","index","setIndex","dataWeather","setData","get","cities","location","lat","long","process","env","REACT_APP_KEY","then","results","console","log","message","map","city","index_city","changeFilter","country","population","timeZone","alpha2Code","weather","description","main","temp"],"mappings":"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","sourcesContent":["import React, { useState, FC, useEffect } from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { gql, useQuery } from \"@apollo/client\"\nimport './info.css'\nimport axios from 'axios';\nconst City = gql`\n  query getCity($name :String!){\n      cities(where: {name: {eq: $name}}) {\n        name\n        population\n        location {\n          lat\n          long\n        }\n        country {\n          name\n          alpha2Code\n        }\n        timeZone {\n          name\n        }\n      }\n  }\n`\ninterface CityProps {\n  name: string,\n  changeFilter: Function,\n\n}\n\ninterface ICity {\n  cities: Array<{\n    name: string,\n    population: number,\n    location: {\n      lat: number,\n      long: number\n    }\n    country: {\n      name: string,\n      alpha2Code: string\n    }\n    timeZone: {\n      name: string\n    }\n  }>\n}\n\n\ninterface WeatherAPI {\n  coord: Coord;\n  weather: Weather[];\n  base: string;\n  main: Main;\n  visibility: number;\n  wind: Wind;\n  clouds: Clouds;\n  dt: number;\n  sys: Sys;\n  timezone: number;\n  id: number;\n  name: string;\n  cod: number;\n}\n\ninterface Clouds {\n  all: number;\n}\n\ninterface Coord {\n  lon: number;\n  lat: number;\n}\n\ninterface Main {\n  temp: number;\n  feels_like: number;\n  temp_min: number;\n  temp_max: number;\n  pressure: number;\n  humidity: number;\n}\n\ninterface Sys {\n  type: number;\n  id: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\ninterface Weather {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n\ninterface Wind {\n  speed: number;\n  deg: number;\n}\n\n\n\n\nconst InfoCity: FC<CityProps> = (props) => {\n  const { data, loading, error } = useQuery<ICity>(City, { variables: { name: props.name } })\n  const [index, setIndex] = useState<number>(-1);\n  const [dataWeather, setData] = useState<WeatherAPI>();\n  useEffect(() => {\n    if (index !== -1) {\n      axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + data?.cities[index].location.lat + \"&lon=\" + data?.cities[index].location.long + \"&appid=\" + process.env.REACT_APP_KEY).then((results) => {\n        setData(results.data);\n        console.log(results.data);\n\n      })\n    }\n\n  }, [index]);\n  console.log(data);\n\n  return (\n    <div className=\"container_global\">\n      {loading && <ClipLoader color=\"blue\" />}\n      {error && <div>{error.message}</div>}\n      {data && data.cities.map((city, index_city) => {\n        if (index === index_city) {\n          return (\n            <div className=\"container_info\" >\n              <div className=\"name no\" onClick={() => {\n                setIndex(index)\n              }}>{city.name}</div>\n              <div className=\"args country\" onClick={() => {\n                props.changeFilter(city.country.name, true)\n              }}>Country: {city.country.name}</div>\n              <div className=\"args\">Population: {city.population}</div>\n              {city.timeZone && <div className=\"args\">TimeZone: {city.timeZone.name}</div>}\n            </div>\n          )\n        } else {\n          return (\n            <div className=\"container_info\" >\n              <div className=\"name\" onClick={() => {\n                setIndex(index_city)\n              }}>{city.name}</div>\n            </div>\n          )\n        }\n      })}\n\n      {index !== -1 &&\n        <div className=\"ventana\">\n          <div className=\"cerrar\" onClick={() => setIndex(-1)}>X</div>\n          <div className=\"datos\">\n            <div className=\"bandera\">\n              <img src={\"https://www.countryflags.io/\" + data?.cities[index].country.alpha2Code + \"/flat/64.png\"}></img>\n\n            </div>\n          <div className=\"data country\" onClick={\n            () => {\n              props.changeFilter(data?.cities[index].country.name,true);\n            }\n            }>Country: {data?.cities[index].country.name}</div>\n            <div className=\"data\">Population: {data?.cities[index].population} </div>\n            {data?.cities[index].timeZone && <div className=\"data\">Time zone: {data.cities[index].timeZone.name}</div>}\n            {dataWeather &&\n            <div>\n                <br />\n                <div className=\"data\">Weather description: {dataWeather.weather[0].description}</div>\n                <div className=\"data\">Time: {(dataWeather.main.temp - 273.15)}ºC</div>\n              </div>\n            }\n          </div>\n        </div>\n\n      }\n    </div>\n  )\n}\n\n\nexport default InfoCity;"]},"metadata":{},"sourceType":"module"}