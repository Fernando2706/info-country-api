{"version":3,"sources":["components/input/input.tsx","components/query/info.tsx","components/query/infoCountry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputText","props","useState","searchName","setName","type","setType","className","placeholder","onChange","e","target","value","onClick","changeFilter","City","gql","InfoCity","useQuery","variables","name","data","loading","error","index","setIndex","dataWeather","setData","useEffect","axios","get","cities","location","lat","long","then","results","console","log","color","message","map","city","index_city","country","population","timeZone","src","alpha2Code","weather","description","main","temp","Country","InfoCountry","countries","capital","index_country","continent","currencies","currencie","languages","language","currency","client","ApolloClient","uri","process","cache","InMemoryCache","App","setAll","isCountry","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bf03704.chunk.js","sourcesContent":["import { fchmod } from 'fs';\nimport React from 'react';\nimport {FC, useState} from 'react';\nimport './input.css'\n\ninterface InputTextProps{\n  changeFilter: Function,\n}\n\nconst InputText: FC<InputTextProps> = (props) => {\n\n  const [searchName, setName] = useState<string>(\"\")\n  const [type, setType] = useState<boolean>(false);\n  \n  return (\n    <div className=\"container\">\n\n      <div className=\"box\">\n        <div className=\"container_search\">\n            <input placeholder=\"Enter a name to continue\" className=\"input_text\" type=\"text\" onChange={(e) => {\n                setName(e.target.value)       \n            }} />\n          <div className=\"button\" onClick={() => {\n            props.changeFilter(searchName,type)\n            }}>Search</div>\n        </div>\n        <div className=\"container_type\">\n            {!type&&\"✔\"}\n          <div className=\"type\" onClick={() => {\n            setType(false);\n            }}>City</div>\n            {type&&\"✔\"}\n          <div className=\"type\" onClick={() => {\n            setType(true)\n            }}>Country</div>\n          </div>\n      </div>\n\n    </div>\n  );\n\n}\n\n\nexport default InputText;","import React, { useState, FC, useEffect } from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { gql, useQuery } from \"@apollo/client\"\nimport './info.css'\nimport axios from 'axios';\nconst City = gql`\n  query getCity($name :String!){\n      cities(where: {name: {eq: $name}}) {\n        name\n        population\n        location {\n          lat\n          long\n        }\n        country {\n          name\n          alpha2Code\n        }\n        timeZone {\n          name\n        }\n      }\n  }\n`\ninterface CityProps {\n  name: string,\n  changeFilter: Function,\n\n}\n\ninterface ICity {\n  cities: Array<{\n    name: string,\n    population: number,\n    location: {\n      lat: number,\n      long: number\n    }\n    country: {\n      name: string,\n      alpha2Code: string\n    }\n    timeZone: {\n      name: string\n    }\n  }>\n}\n\n\ninterface WeatherAPI {\n  coord: Coord;\n  weather: Weather[];\n  base: string;\n  main: Main;\n  visibility: number;\n  wind: Wind;\n  clouds: Clouds;\n  dt: number;\n  sys: Sys;\n  timezone: number;\n  id: number;\n  name: string;\n  cod: number;\n}\n\ninterface Clouds {\n  all: number;\n}\n\ninterface Coord {\n  lon: number;\n  lat: number;\n}\n\ninterface Main {\n  temp: number;\n  feels_like: number;\n  temp_min: number;\n  temp_max: number;\n  pressure: number;\n  humidity: number;\n}\n\ninterface Sys {\n  type: number;\n  id: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\ninterface Weather {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n\ninterface Wind {\n  speed: number;\n  deg: number;\n}\n\n\n\n\nconst InfoCity: FC<CityProps> = (props) => {\n  const { data, loading, error } = useQuery<ICity>(City, { variables: { name: props.name } })\n  const [index, setIndex] = useState<number>(-1);\n  const [dataWeather, setData] = useState<WeatherAPI>();\n  useEffect(() => {\n    if (index !== -1) {\n      axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + data?.cities[index].location.lat + \"&lon=\" + data?.cities[index].location.long + \"&appid=\" + process.env.REACT_APP_KEY).then((results) => {\n        setData(results.data);\n        console.log(results.data);\n\n      })\n    }\n\n  }, [index]);\n  console.log(data);\n\n  return (\n    <div className=\"container_global\">\n      {loading && <ClipLoader color=\"blue\" />}\n      {error && <div>{error.message}</div>}\n      {data && data.cities.map((city, index_city) => {\n        if (index === index_city) {\n          return (\n            <div className=\"container_info\" >\n              <div className=\"name no\" onClick={() => {\n                setIndex(index)\n              }}>{city.name}</div>\n              <div className=\"args country\" onClick={() => {\n                props.changeFilter(city.country.name, true)\n              }}>Country: {city.country.name}</div>\n              <div className=\"args\">Population: {city.population}</div>\n              {city.timeZone && <div className=\"args\">TimeZone: {city.timeZone.name}</div>}\n            </div>\n          )\n        } else {\n          return (\n            <div className=\"container_info\" >\n              <div className=\"name\" onClick={() => {\n                setIndex(index_city)\n              }}>{city.name}</div>\n            </div>\n          )\n        }\n      })}\n\n      {index !== -1 &&\n        <div className=\"ventana\">\n          <div className=\"cerrar\" onClick={() => setIndex(-1)}>X</div>\n          <div className=\"datos\">\n            <div className=\"bandera\">\n              <img src={\"https://www.countryflags.io/\" + data?.cities[index].country.alpha2Code + \"/flat/64.png\"}></img>\n\n            </div>\n          <div className=\"data country\" onClick={\n            () => {\n              props.changeFilter(data?.cities[index].country.name,true);\n            }\n            }>Country: {data?.cities[index].country.name}</div>\n            <div className=\"data\">Population: {data?.cities[index].population} </div>\n            {data?.cities[index].timeZone && <div className=\"data\">Time zone: {data.cities[index].timeZone.name}</div>}\n            {dataWeather &&\n            <div>\n                <br />\n                <div className=\"data\">Weather description: {dataWeather.weather[0].description}</div>\n                <div className=\"data\">Time: {(dataWeather.main.temp - 273.15)}ºC</div>\n              </div>\n            }\n          </div>\n        </div>\n\n      }\n    </div>\n  )\n}\n\n\nexport default InfoCity;","import React, { useState, FC, useEffect } from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { gql, useQuery } from \"@apollo/client\"\nimport './infoCountry.css'\nimport axios from 'axios';\n\n\nconst Country = gql`\n  query getCountry($name :String!){\n    countries(where: {name: {eq: $name}}) {\n      continent {\n        name\n      }\n      currencies {\n        name\n      }\n      population\n      languages {\n        name\n      }\n      capital {\n        name\n        location {\n          lat\n          long\n        }\n      }\n      name\n      alpha2Code\n      \n    }\n  }\n    \n  \n`\n\ninterface CountryProps {\n  name: string\n  changeFilter: Function,\n}\n\ninterface ICountry {\n  countries: Array<{\n    continent: {\n      name: string\n    },\n    capital: {\n      name: string,\n      location: {\n        lat: number,\n        long: number\n      }\n    },\n    currencies: Array<{\n      name: string\n    }>,\n    population: number,\n    languages: Array<{\n      name: string\n    }>,\n    name: string,\n    alpha2Code: string,\n\n  }>\n}\n\ninterface WeatherAPI {\n  coord: Coord;\n  weather: Weather[];\n  base: string;\n  main: Main;\n  visibility: number;\n  wind: Wind;\n  clouds: Clouds;\n  dt: number;\n  sys: Sys;\n  timezone: number;\n  id: number;\n  name: string;\n  cod: number;\n}\n\ninterface Clouds {\n  all: number;\n}\n\ninterface Coord {\n  lon: number;\n  lat: number;\n}\n\ninterface Main {\n  temp: number;\n  feels_like: number;\n  temp_min: number;\n  temp_max: number;\n  pressure: number;\n  humidity: number;\n}\n\ninterface Sys {\n  type: number;\n  id: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\ninterface Weather {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n\ninterface Wind {\n  speed: number;\n  deg: number;\n}\n\n\n\nconst InfoCountry: FC<CountryProps> = (props) => {\n\n  const { data, loading, error } = useQuery<ICountry>(Country, { variables: { name: props.name } })\n  const [index, setIndex] = useState<number>(-1);\n\n  const [dataWeather, setData] = useState<WeatherAPI>();\n\n  useEffect(() => {\n    if (index !== -1) {\n      axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + data?.countries[index].capital.location.lat + \"&lon=\" + data?.countries[index].capital.location.long + \"&appid=\" + process.env.REACT_APP_KEY).then((results) => {\n        setData(results.data);\n        console.log(results.data);\n\n      })\n    }\n\n  }, [index]);\n\n  return (\n    <div className=\"container_global_country\">\n      {loading && <ClipLoader color=\"blue\" />}\n      {error && <div>{error.message}</div>}\n      {data && data.countries.map((country, index_country) => {\n        if (index === index_country) {\n          return (\n            <div className=\"container_info_country\" >\n              <div className=\"name_country no\" onClick={() => {\n                setIndex(index);\n\n              }}>{country.name}</div>\n              <div className=\"args_country\">Continent: {country.continent.name}</div>\n              <div className=\"capital\" onClick={() => {\n                props.changeFilter(country.capital.name, false)\n              }}>Capital: {country.capital.name}</div>\n              <div className=\"args_country\">Currencies: </div>\n              {country.currencies && country.currencies.map((currencie) => {\n                return (<div>---{currencie.name}</div>)\n              })}\n              <div className=\"args_country\">Languages: </div>\n              {country.languages && country.languages.map((language) => {\n                return (<div>---{language.name}</div>)\n              })}\n              <div className=\"args_country\">Population: {country.population}</div>\n\n            </div>\n\n          )\n        } else {\n          return (\n            <div className=\"container_info_country\" >\n              <div className=\"name_country\" onClick={() => {\n                setIndex(index_country)\n              }}>{country.name}</div>\n\n\n            </div>\n          )\n        }\n      })}\n      {index != -1 &&\n        <div className=\"ventana\">\n          <div className=\"cerrar\" onClick={() => setIndex(-1)}>X</div>\n          <div className=\"bandera\">\n            <img src={\"https://www.countryflags.io/\" + data?.countries[index].alpha2Code + \"/flat/64.png\"}></img>\n\n          </div>\n          <div className=\"datos\">\n            <div className=\"data\">Continent: {data?.countries[index].continent.name}</div>\n            <div className=\"data\">Name: {data?.countries[index].name}</div>\n            <div className=\"data\">Code: {data?.countries[index].alpha2Code}</div>\n            <div className=\"data\">Population: {data?.countries[index].population}</div>\n            <div className=\"data capital\" onClick={() => {\n              props.changeFilter(data?.countries[index].capital.name, false)\n            }}>Capital: {data?.countries[index].capital.name}</div>\n            {data?.countries[index].languages && data.countries[index].languages.map((language, index) => {\n              return (<div className=\"data\">Language {index}: {language.name}</div>)\n            })}\n            {data?.countries[index].currencies && data.countries[index].currencies.map((currency, index) => {\n              return (<div className=\"data\">Currency {index}: {currency.name}</div>)\n            })}\n            {dataWeather &&\n              <div>\n                <br />\n                <div className=\"data\">Weather description: {dataWeather.weather[0].description}</div>\n                <div className=\"data\">Time: {(dataWeather.main.temp - 273.15)}ºC</div>\n              </div>\n            }\n          </div>\n        </div>\n      }\n    </div>\n  )\n\n}\n\nexport default InfoCountry;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport { ApolloProvider } from '@apollo/client/react';\nimport './App.css';\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core';\n\nimport InputText from './components/input/input'\nimport InfoCity from './components/query/info'\nimport InfoCountry from './components/query/infoCountry'\n\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_URL,\n  cache: new InMemoryCache()\n})\n\n\nfunction App() {\n  \n  const [searchName, setName] = useState<string>(\"\")\n  const [type, setType] = useState<boolean>(false);\n\n  const setAll = (name: string, isCountry: boolean) => {\n    setName(name);\n    setType(isCountry)\n  }\n  console.log(\"autor: FERNANDO MURUA ALCAZAR\");\n  \n  return (\n    <ApolloProvider client={client}>\n      {searchName === \"\" &&\n        <InputText changeFilter={setAll}/>\n      }\n\n      {searchName !== \"\" &&\n        <div>\n          <div className=\"center\" onClick={() => {\n            setName(\"\")\n            setType(false)\n            }}>\n              <div className=\"image\"></div>\n              <div>Click to restart the search</div>\n          </div>\n        {!type &&\n          <InfoCity name={searchName} changeFilter={setAll}/>\n        }\n        {type &&\n          <InfoCountry name={searchName} changeFilter={setAll}/>\n        }\n\n        </div>\n        \n        \n      }\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}